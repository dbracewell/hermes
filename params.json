{"name":"Hermes","tagline":"A natural language processing framework for Java","body":"<p align=\"center\">\r\n<img align=\"center\" src=\"https://github.com/dbracewell/hermes/blob/gh-pages/images/hermes.png\" alt=\"Hermes\"/>\r\n</p>\r\n\r\n\r\n***\r\nHermes is a Natural Language Processing framework for Java inspired by the [Tipster Architecture](http://cs.nyu.edu/cs/faculty/grishman/tipster.html) and [TextBlob](https://textblob.readthedocs.org/en/dev/).\r\nHermes focuses on simplifying the development and use of NLP technologies by providing a framework to quickly access and construct linguistic annotations on documents using multiple cores or multiple machines (using [Apache Spark](http://spark.apache.org/)). At the core of Hermes is the HString which acts like a Java string on steroids. \r\n\r\nThe core Hermes package provides modules for tokenization, sentence segmentation, lexicon matching, and the Lyre extraction framework. Additional modules provide part-of-speech tagging, named entity recognition, shallow parsing, and dependency parser.\r\n\r\n* [HStrings](HStrings)\r\n* [Documents](Documents)\r\n* [Annotations](Annotations)\r\n* [Attributes](Attributes)\r\n* [Relations](Relations)\r\n* [Corpora](Corpora)\r\n* [Caduceus](Caduceus)\r\n\r\n## Quickstart\r\n```java\r\n//Initializes configuration settings\r\nConfig.initialize(\"GettingStarted\");\r\n\r\n//Documents are created using the DocumentFactory class which takes care of preprocessing text (e.g\r\n//normalizing white space and unicode) and constructing a document.\r\nDocument document = DocumentFactory.getInstance().create(\"The quick brown fox jumps over the lazy dog.\");\r\n\r\n//The pipeline defines the type of annotations/attributes that will be added to the document.\r\n//Processing is done parallel when multiple documents are passed in.\r\nPipeline.process(document, Types.TOKEN, Types.SENTENCE);\r\n\r\n//For each sentence (Types.SENTENCE) print to standard out\r\ndocument.sentences().forEach(System.out::println);\r\n\r\n//Counts the token lemmas in the document (since we don't have lemmas \r\n//annotated it will just return lower case forms)\r\nCounter<String> unigrams = document.countLemmas(Types.TOKEN);\r\n//Prints: Count(the) = 2\r\nSystem.out.println(\"Count(the) = \" + unigrams.get(\"the\"));\r\n\r\n//Add a custom annotation, by performing a regex for fox or dog\r\n//First define the type\r\nAnnotationType animalMention = AnnotationType.create(\"ANIMAL_MENTION\");\r\n//Second create annotations based on a regular expression match\r\nMatcher matcher = document.matcher(\"\\\\b(fox|dog)\\\\b\");\r\nwhile (matcher.find()) {\r\n  document.createAnnotation(animalMention, matcher.start(), matcher.end());\r\n}\r\n\r\n//Print out the animal mention annotations\r\ndocument.get(animalMention).forEach(a -> System.out.println(a + \"[\" + a.start() + \", \" + a.end() + \"]\"));\r\n\r\n```\r\n\r\n## Other Examples\r\n\r\n* [Term count using Spark](SparkTermCount)\r\n\r\n## License\r\nHermes is [Apache License, Version 2.0 ](LICENSE) licensed making it free for all uses.\r\n\r\n## Maven\r\nIf you use maven, you can get the latest release using the following dependency:\r\n\r\n### Hermes Core\r\nThe core sub-module contains the basic api with tokenization and sentence segmentation.\r\n```\r\n <dependency>\r\n     <groupId>com.davidbracewell</groupId>\r\n     <artifactId>hermes-core</artifactId>\r\n     <version>${VERSION}</version>\r\n </dependency>\r\n```\r\n\r\n### English Models\r\nEnglish models for part-of-speech tagging and shallow parsing (Phrase Chunk) are available via maven. English dependency parser models can be downloaded from the [MaltParser site](http://www.maltparser.org/mco/mco.html).\r\n```\r\n <dependency>\r\n     <groupId>com.davidbracewell</groupId>\r\n     <artifactId>hermes-en-models</artifactId>\r\n     <version>${VERSION}</version>\r\n </dependency>\r\n```\r\n\r\n### OpenNLP Backend\r\nA set of wrappers around the [OpenNLP](https://opennlp.apache.org/) framework for tokenization, sentence segmentation, part-of-speech tagging, shallow parsing, named entity recognition, and syntactic parsing (tbd).\r\n```\r\n <dependency>\r\n     <groupId>com.davidbracewell</groupId>\r\n     <artifactId>hermes-opennlp</artifactId>\r\n     <version>${VERSION}</version>\r\n </dependency>\r\n```\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}